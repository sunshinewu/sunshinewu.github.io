<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunshineWu.Print()</title>
  <subtitle>老鲜肉和他的技术“渣”谈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunshinewu.github.io/"/>
  <updated>2016-09-08T13:18:17.500Z</updated>
  <id>http://sunshinewu.github.io/</id>
  
  <author>
    <name>Sunshine.Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寒冬真的来了？一个技术人的浅薄理解</title>
    <link href="http://sunshinewu.github.io/2016/09/06/Winter-Economy/"/>
    <id>http://sunshinewu.github.io/2016/09/06/Winter-Economy/</id>
    <published>2016-09-06T14:33:19.000Z</published>
    <updated>2016-09-08T13:18:17.500Z</updated>
    
    <content type="html"><![CDATA[<p>光鲜亮丽的G20国际峰会刚在美丽的杭城圆满结束，太多美妙的灯光秀，大气恢弘的表演，精心准备的中式国宴，习大大信心满满的讲话及彭妈妈的优雅尊容，各种无处不都在展现中国的精彩及风貌，点开网络各媒体下面的评论，处处洋溢着身为国人的骄傲与自豪，除了这些我们大家都能看到的之外，同时也在向全世界传达一个意向：中国的经济，没有触底，中国经济，还很稳健并持续发展着，中国有信心！<center><img src="http://sunshinewu.github.io/images/Winter.gif"></center></p>
<p> <a id="more"></a> </p>
<p>其实，不管是国家，还是个人，当处于低谷或不如意时，适当地给自己信心，非常有必要，如果自己都没信心了，自己都先倒下了，那也就永远沉睡下去了。这是一个肯定。当然，客观方面，我们不得不提起一个现实的东西，<strong>当我们越缺少什么的时候，可能越在乎什么，也会越想更好地表现出自己虚的那一面。</strong></p>
<h1 id="初冬？"><a href="#初冬？" class="headerlink" title="初冬？"></a>初冬？</h1><p>互联网行业寒冬，资本寒冬， 经济寒冬，说了好几年的寒冬，年年说来，好像作为我包括身边人的感触并没有那么激烈、直接，好像对我们普通大众也好像没有直接太大的影响，生活该怎样还是怎样，日子该怎么过还怎么过，工作亦然。暂不考虑物价上涨，通货膨胀这些因素的影响，只不过真要说直接的，可能也就是这一两年比较容易听到“业务难做，市场难推广，今年公司的效益远不如之前”类似的话，继而奖金少了？没涨薪了？某某部门精简人员了？甚至自己所在公司倒闭了？对于国家层面，这些微乎其微，但整个这些效应无限放大及增长，那就意味着：<strong>下雪了…寒冬真有可能一点点到来。</strong></p>
<p>这两年，在“大众创业，万众创新”的感召下，整个中国的互联网及移动互联产业各种蓬勃发展，资本也不差钱地往这些产业各种砸，不断新兴的初创孵化企业也像春笋版一颗颗冒出来，攥紧动不动就几千万的天使\A轮就各种烧，人力市场的交换，薪资的膨胀也紧随而之，好不热闹。在那一刻，只要不是IT或互联网行业圈子的人，都会投来羡慕的眼光，羡慕你们的高薪，羡慕你们各自所谓美好的下午茶，团队宽松氛围好，甚至有些公司还招募了程序猿美女鼓励师，呵呵，恨不得大学专业重来，恨不得从底层做起开始报培训班学编码（这两年，确实大量的非科班出身的应届生都在报班学iOS，学Android等等，也让这两年的培训班各种赚得盆满钵满）。<strong>泡沫，终究会破的。</strong>随之而来，倒下的企业接踵而来，可能上一个新闻上报的是成功融资多少的消息，下一个新闻就已然成为失败案例中的又一典型，历史就是这么快速地在演变，诺基亚的前车之鉴忘了么？</p>
<h1 id="寒冬下的现状"><a href="#寒冬下的现状" class="headerlink" title="寒冬下的现状"></a>寒冬下的现状</h1><p>纵使这样，在所有实体经济低迷，产能过剩的当下，（呵呵的房地产方面，我就不在这个层面谈了）“互联网+”只能是政府及我们能够给出的一道现状最好的解题思路及方法，希望借助互联网重新让经济复苏。但很多初创公司，其实还是走错了方向，或者说互联网拯救经济只是我们的一厢情愿。这两天，通过一些渠道，了解到了一些消息，JD，ALi，58等都开始各种苦逼的内部运动，正大光明地提出强制“996”没有加班费口号，摆出谁不执行谁滚蛋的态度。就如有其中的童鞋表示，作为码农，大部分人都了解，在国内加班算是常态，需求较急时连续 996 几周多数人也没有什么怨言，但如果是硬性作为工作制度这点确实就有点接受不了。因为偶尔的加班完成自己的任务是必须的，但如果告诉这种加班的日子是工作规定，这种日子是见不到头的，怕这种状态消磨了对日常生活的应有追求。 我想说，没办法，国外确实不会这样，但是中国的这点臭毛病，真是没法改的。</p>
<p>其次，跳出这些抱怨，我们从另外一个角度去看待这个问题，是不是又有另外一个解读呢？那就是，以前初创的互联网公司，那种996甚至天天997不当人使的干活，对于初创公司九死一生这种生死存亡的问题大家能理解的话，如今知名的大互联网公司也开始这么做又代表什么呢？我相信，如果不是企业不好做，效益不好，没有哪个知名的互联网公司会赶这么作大死搞996，有人说这其实也是一种变相裁员罢了。当然，各公司情况不一，不去深入剖析，但从这些我们可以或多或少对中国经济形势有一个大致的预判，<strong>痛苦期不会那么快就结束，甚至真正的痛苦还没到来。</strong></p>
<p>这些年，互联网玩的全是概念，全是虚的，光整互联网没用，互联网只有结合起实体业，用互联网的技术让实体业更好地运转起来更好地销售起来，才是互联网经济接下来的出路。也就说，<strong>互联网技术只能是辅，实体经济才是主，如果颠倒甚至只偏互联网，都只能是穷途末路。</strong>如果实体经济倒下了，经济自然不景气，钱更难挣，物资等价物这些又如何等价交换？每个人到哪里去挣钱？人人都到互联网公司挣钱？不现实。<strong>互联网不是解决实体经济倒下的替换品。</strong></p>
<h1 id="寒冬下的教育"><a href="#寒冬下的教育" class="headerlink" title="寒冬下的教育"></a>寒冬下的教育</h1><p>说起挣钱，必然会聊聊工作，职业的选择。一个亲戚家的孩子，明年应届本科毕业，计算机专业科班出身，准备找工作了，大概了解了下，想看看他有什么想法？结果，一打听，惊出了一身汗，周围的大部分同学还有他，都准备跟着报15000学费“育知同创”（搜下它的创办日期就呵呵了）与学校共同忽悠的“培训班”学Android。他由于家境贫苦，因3个月15000的学费无法拿出，故才没报名，如若不是这样，他告诉我肯定就报了！当我听到这个信息的时候，瞬间非常非常失望及愤怒！理由如下：</p>
<p>1、了解现在的这种培训班的大致情况，纯商业批量化的操作，甚至涉及各种无良操作，无论是所谓的项目（作业），还是最终简历，一概一模一样，这样量产出来的人，跟机械化的机器人有何区别？这样的人，上岗之后不害公司？对真正的商业项目有用？（当然，我这里没有任何歧视，我控诉的只是无良只顾挣钱赚取最大利益的这些奸商培训班）</p>
<p>2、 这孩子及其它同学的科班知识没学好，大学白上了！（家境本是清苦，为何没有自悟自省？为何不多懂事一些让自己的大学过得更加充实，努力？我一直对家教素养教育特别感兴趣，寒门的家庭一样出烂子，富门中产家庭一样出自爱的好孩子）其次，如果你的专业不是计算机或相关专业，真想从事计算机行业，报个班情有可原，但作为一个科班出身的人，连技术你都自学不了，还要借助培训，那只能说明自学能力不行，发展有限，劝还是早点转行。科班生如果报班了，这是一种侮辱。何况别说科班出身，行业中一样有大量非科班出身非常棒的技术人，如阮一峰金融博士、日语系毕业的司徒正美等。<strong>要想通过技术找到工作立足，必须自己努力，别人是帮不了你的。</strong>经历了这么多年，包括我自己的失败，确认这是真理。</p>
<p>3、 最最气愤的是这一点，现在的这些无良培训机构竟然都渗透到正规的大学里头去了！（这点要做出一些声明，一些学校的校商共建人才培养合作项目，不同于我说的这类培训机构，比如中大的中法核工程，一些高校的定向培养班，这些都是正规且意向培养的）而这些急功近利的培训机构，通过一些大学昧着良心干出这种事，那就是罪了！作为大学及老师，鼓励并且号召科班出身的学生付费报名此类培训班，为了自己的利益和肮脏的钱，真是啥都能干！为人师者，教育部门做出这种行为，难道没有一丁点羞耻？果然<strong>中国的教育，还是不能期盼太高，一切都是唯利是图，不是求学求知塑造优秀人格的地方。</strong>对于一些准备出社会的一张张“白纸”，这害人不浅！</p>
<h1 id="寒冬下的职场选择"><a href="#寒冬下的职场选择" class="headerlink" title="寒冬下的职场选择"></a>寒冬下的职场选择</h1><p>上面说完我这小亲戚的情况，对于这些还在校园中的一张张“白纸”而言，社会是怎样，职场又是怎样，他们一切都是未知又好奇的。抛开这些，现在能实实在在影响到他们的，就是身边的老师，同学，我能想象得到，当你班上几乎所有的同学都在报这个培训的时候，这已然不是无知就可以轻易地定论，取而代之的而是内心的焦灼，彷徨。毕竟，环境真的能影响一个人。所以我愤怒。</p>
<p>这两年如果负责招聘的人，应该深有感触，所有的技术岗位里头，iOS &amp; Android的简历是最不缺的，往往挂出去一天，就能收获上百个简历，甚至有时候，真有种公务员好职位那般竞争的激烈感！当然，真正符合的人选，少之又少，一个个又刷下去了，同时，也加大了招聘人的挑选人员的工作强度及难度。陷入一个<strong>“企业招不来人，人找不到工作”</strong>这样的窘境。</p>
<p>这个跟上面的教育机构大批量的量产有关，其次也跟这几年的移动互联网的火热息息相关，是移动互联网的火热，造就了iOS\Android开发的火热。毕竟人都不傻，对于培训机构，哪个赚钱，它就干哪个培训。对于毕业生或求职者来说，哪个工作好找，工资待遇高福利好，自然而然就会去趋向选择那一个方向。而始料未及的是，随之的经济低迷，移动互联网泡沫逐渐破灭，一个个移动互联网公司倒下，也给这些行业一次次泼了无情的凉水，所要的人员需求自然就会越来越少。</p>
<p>这种思维，就跟某些地方政府的简单思维一样，发现今年的猪肉涨价好多，OK，号召乡亲们各种养猪，结果同一个时间段下，所有的成品猪出圈准备卖的时候，发现市场不一样了，根本卖不上价啊！发现今年的西瓜好卖且贵啊，接着乡亲们自己看似看得懂行情，于是齐刷刷地都在自己家菜地里种上了西瓜苗，于是，到了收获收割季时，1毛钱1斤都无人问津。<strong>物以稀为贵，人也一样。</strong></p>
<h3 id="所以，真正从事某领域的人，可能实际上并不真正了解此领域。"><a href="#所以，真正从事某领域的人，可能实际上并不真正了解此领域。" class="headerlink" title="所以，真正从事某领域的人，可能实际上并不真正了解此领域。"></a>所以，真正从事某领域的人，可能实际上并不真正了解此领域。</h3><p>对于像我这样的一个技术渣人，还失败地创过苦逼的业，以及一些其它经历，我就斗胆地来说说我理解的职场选择及技术方向，不一定适合所有的人。</p>
<h4 id="技术何去何从？"><a href="#技术何去何从？" class="headerlink" title="技术何去何从？"></a>技术何去何从？</h4><p>任何一份技术岗位或其它工作，永远都符合金字塔模型的，顶尖或处于中上层或具备综合能力的人，永远都相对较少，而这类人也是企业最需要最渴望的。而易于替代且初级的人员，永远也都是占最多数最不缺的。所以，好比iOS\Android这些移动端的开发，准确来说，是初中级的很难找工作，而资深或高级的，永远还都是缺的。只不过，移动端的需求接下来会处于较为稳定的状态，基本上都是大公司会要，毕竟现在处于人人都有智能手机的时代，移动端不可能缺席。问题来了，大公司要的移动端人才，绝对不是简简单单的，必然要资深点的，何况人力市场的百里挑一。</p>
<p>上面说完，你认为这一领域的竞争就这样？其实，最关键的还远不只这些。还可以从技术本身的方向延伸，关于移动端的相关技术，iOS存在各种技术限制，毕竟苹果的生态圈有关，但近年来苹果在全球的手机、笔记本市场逐年慢慢疲软，创新也在逐年降低，未来如何我就不去预测了，我主要是顺便对上面我这亲戚孩子一个大致对Android的技术方向的简单预测。</p>
<p>Android，借助于Google得益于发展到现在，Google童鞋做出的贡献绝对功不可没，也为整个Android系的所有产业及Google带去了丰厚的回报。但对于Android的老爹Java来说，前些年，没卖给Google而给了Oracle，这就是一个永远无法解脱的宿命。看着你们都在挣大钱，而自己身为老爹的自己啥都没捞着，还得持续不断的支出，你懂得。这些恩怨背景，我就不去细说了。但不得不说，这是会影响后续Android社区发展的一个致命因素，这不也才有了Google逐渐慢慢放弃，重新打造自己的新一套体系那些东西。</p>
<p>而现在的移动端，尤其是大公司，都不会只是搞原生Android开发了，而是混合型开发，只不过外面的一个框架用下Android，其他的内容结构页面渲染，都用前端进行统一构建，这是出于开发成本+各种适配兼容的考虑。现在我们日常使用的腾讯各种客户端、淘宝的客户端、京东的APP都是这样做的。必然Android的可用空间将会相应压缩，当然有些产品，是必须得尽量用Native开发的，Web还是有限，话又说回来，谁知未来的技术进步到哪个阶段？说不定哪一天全部都淘汰了呢。说到这，其实我最不想讨论这些没劲的争论或者技术好坏，<strong>技术没有好坏，只有是否合适。</strong>何况，对于一个技术人员来说，快速的自我学习新技术的能力是必备的。在这里，我要引出一个我真正想说的，<strong>对于一个技术人的成长或职场选择，更多地在于一个行业方向。</strong></p>
<p><strong>技术终究还是得服务于行业，服务于业务。</strong>否则空谈技术有何用？</p>
<p>那么，结合当今困难的实体经济及行业，我们的IT及互联网方向该如何选择？毕竟行业太多，我也没有百事通的能力，但可以从某些点去侧面了解一些，好比紧跟中央高层的最新决策。看看到底政府在号召什么，到底我们大家迫切地需要什么。如果对于行业的方向，你撇下国策自己无头苍蝇般随意下海创业或选择某个行业领域，成功率基本太低，职业发展可能也会相应有所受限。这里，个人就只粗略地谈谈其中我稍微看好的几点。</p>
<ul>
<li><strong>农业科技方向。</strong>三农问题，始终是摆在整个十多亿中国人面前必须要解决的，农民不可少，农村必须要有，农业的吃饭问题关系千家万户，不是简单地通通到城市打工，成为城里人就能解决中国的人口发展问题的，可以说，没有农业，就没有中国。比如提高农业灌溉+播种+喷洒农药相关的农业无人机市场，这就是一个非常具有竞争力的一个科技方向，也是用IT及互联网技术解决并提高旧有落后技术的典范。</li>
<li><strong>绿色能源方向。</strong>无论是电力，风力，煤炭，石油，如何用科技的手段及互联网最新的技术及思维去解决，变得更节约能源，利用率更高，工作效率更高。在调研电改最新文件及能源绿色化等中央最新一系列方案出发，可以考虑服务于特大央企如电网电厂，中石油，中海油，各地能源集团等相关的IT软件及互联网公司也是个经济寒冬时期的合适职场选择，毕竟背靠着大树，至少还能活下来，不是么？ </li>
<li><strong>电商方向。</strong>中国的电商发展及市场规模，全球第一，从而在电商相关的技术、运营策略、市场方面引领全球。其实，在某些方面，如今的实体经济萧条的原因，多多少少也跟电商的发展脱离不了干系。而人们日益追求高品质生活的迫切需求，加上全球化经济谋求复苏的关联，又催生了跨境电商的这两年的极速发展，迎来了新一轮各种蓬勃兴起，但终归最终的格局还是属于大公司的天下。所以，阿里，京东，亚马逊，唯品会，网易考拉海购等等倒是技术人可以停留足以抗衡萧条大背景的好选择。</li>
<li><strong>衣食住行的迫切且必要方向。</strong>光“衣食住行”不行，必须要解决的是必要方向。如滴滴打车，一旦用上了它，你会发现，你的生活悄然被其改变，出行变得更加方便。支付宝，一旦用上了它，不管怎样，出门不带钱包真的变成了习惯。 这些东西，也是一次次在解决你每天都需要做的某些必要事情时，让你的体验又上一台阶，让你逐渐地离开不了它。</li>
</ul>
<p>还有很多很多行业及方向，我没法也没有那个能力一一叙述。只不过，到了一定年纪，是该要想想在某个行业或领域一点点沉思&amp;扎下来了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><strong>“经济”</strong>，这个高大上的名词儿，看似离我们很远，但实实在在时刻影响着我们普通百姓的生活，工作。希望中国的经济，早点复苏起来，也期待着国家，我们个人越来越好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;光鲜亮丽的G20国际峰会刚在美丽的杭城圆满结束，太多美妙的灯光秀，大气恢弘的表演，精心准备的中式国宴，习大大信心满满的讲话及彭妈妈的优雅尊容，各种无处不都在展现中国的精彩及风貌，点开网络各媒体下面的评论，处处洋溢着身为国人的骄傲与自豪，除了这些我们大家都能看到的之外，同时也在向全世界传达一个意向：中国的经济，没有触底，中国经济，还很稳健并持续发展着，中国有信心！&lt;center&gt;&lt;img src=&quot;http://sunshinewu.github.io/images/Winter.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="经济" scheme="http://sunshinewu.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="经济寒冬" scheme="http://sunshinewu.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%AF%92%E5%86%AC/"/>
    
      <category term="移动互联网" scheme="http://sunshinewu.github.io/tags/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="互联网+" scheme="http://sunshinewu.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="实体经济" scheme="http://sunshinewu.github.io/tags/%E5%AE%9E%E4%BD%93%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="G20" scheme="http://sunshinewu.github.io/tags/G20/"/>
    
      <category term="大众创业" scheme="http://sunshinewu.github.io/tags/%E5%A4%A7%E4%BC%97%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>浅尝这杯前端构建的「Gulp」</title>
    <link href="http://sunshinewu.github.io/2016/08/25/Gulpjs/"/>
    <id>http://sunshinewu.github.io/2016/08/25/Gulpjs/</id>
    <published>2016-08-25T15:33:19.000Z</published>
    <updated>2016-08-25T19:00:24.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大环境所思"><a href="#大环境所思" class="headerlink" title="大环境所思"></a>大环境所思</h1><p><strong>Node</strong> 阵营这两年一下子打了不少鸡血，光从 <strong>npm</strong> 这名目繁多的各类 Packages \ Libraries 急剧增长的速度就可以亲切又深刻滴感受到啊！这带来各种开发易用性，便利性，高效率的轮子同时，也带来了一些苦恼。什么？我刚<code>npm install</code>完准备要学的 XXX 库就这么被告知过时了？！ 神马？现在又流行 XXXX 了！ 好吧，慢慢地你会不自觉地被前端火热的这世界一点点在冲击着你的认知，好像前端的世界，永远没完没了地各种颠覆，各种折腾。以致，你会时常不由自主地产生这么一个疑问：为什么我们不能在JavaScript的地盘上多消停一会儿？<center><img src="http://sunshinewu.github.io/images/Gulpjs.gif"></center></p>
<p> <a id="more"></a> </p>
<p>当然，这其实也意味着相对两个方面：</p>
<ol>
<li>前端世界的很多东西，与现实及其它后端语言所具备的工程化、专业化仍存在一些落后的情况；</li>
<li>前端，火！贵圈，特火！ :)</li>
</ol>
<h2 id="前端自动化构建下的急迫性"><a href="#前端自动化构建下的急迫性" class="headerlink" title="前端自动化构建下的急迫性"></a>前端自动化构建下的急迫性</h2><p>平常我们日常前端开发中，常会遇到各种纠结的问题，稍微大一点的项目，涉及到各种手工JShint检测，Less\Sass编译，甚至直接放到浏览器中使用，会存在诸如加载\请求过多，文件过大而加载缓慢等乱七八糟又无谓重复劳动的问题。所以，在部署到生产环境的时候，往往会需要做一些JS\CSS代码合并压缩，图片大小优化，引用链接修改，版本增加CDN回源缓存等等这些事。</p>
<p>这些以前繁琐又重复的工作，现在可以借助 Grunt 或者 Gulp 等各种自动化前端构建工具直接完成了，非常省事，虽然之前早已就有相关解决方案，但显然不是对前端工程师更为友好的方案。 Grunt \ Gulp 的出现，带来了一片光明呐!</p>
<h2 id="一言不合就干掉"><a href="#一言不合就干掉" class="headerlink" title="一言不合就干掉"></a>一言不合就干掉</h2><p>什么？不知从什么时候开始，贵圈朋友圈就已经流传着这么一句：放弃过时的 Grunt 用 Gulp 吧！可是上面刚说完 Grunt 也是牛掰掰的，怎么画风急转直下呀？！ 好吧，鉴于此，我们先来看看两者的对比吧。</p>
<h3 id="Gulp-vs-Grunt"><a href="#Gulp-vs-Grunt" class="headerlink" title="Gulp vs Grunt"></a>Gulp vs Grunt</h3><h6 id="首先从代码的文件编写形式来瞅瞅"><a href="#首先从代码的文件编写形式来瞅瞅" class="headerlink" title="首先从代码的文件编写形式来瞅瞅~"></a>首先从代码的文件编写形式来瞅瞅~</h6><p>这里我们引用 “<a href="https://travismaynard.com/writing/no-need-to-grunt-take-a-gulp-of-fresh-air" target="_blank" rel="external">No Need To Grunt, Take A Gulp Of Fresh Air</a>” 中的两段代码来，以比较两者看上去的区别。</p>
<blockquote>
<p>gruntfile.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    concat: &#123;</div><div class="line">      <span class="string">'dist/all.js'</span>: [<span class="string">'src/*.js'</span>]</div><div class="line">    &#125;,</div><div class="line">    uglify: &#123;</div><div class="line">      <span class="string">'dist/all.min.js'</span>: [<span class="string">'dist/all.js'</span>]</div><div class="line">    &#125;,</div><div class="line">    jshint: &#123;</div><div class="line">      files: [<span class="string">'gruntfile.js'</span>, <span class="string">'src/*.js'</span>]</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">      files: [<span class="string">'gruntfile.js'</span>, <span class="string">'src/*.js'</span>],</div><div class="line">      tasks: [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// Load Our Plugins</span></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Register Default Task</span></div><div class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>gulpfile.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Lint JS</span></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">    .pipe(jshint())</div><div class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Concat &amp; Minify JS</span></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">    .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">    .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Watch Our Files</span></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.watch(<span class="string">'src/*.js'</span>, [<span class="string">'lint'</span>, <span class="string">'minify'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Default</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'lint'</span>, <span class="string">'minify'</span>, <span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>
<p>从上面我们很清晰地可以看到，Grunt 主要是基于配置文件来做构建的，所以，写 Gruntfile.js 的时候，你要按照别人定好的规则来写配置文件，每个任务的配置文件规则（JSON格式）可能都不尽相同。 而 Gulp 采用的是代码优于配置的策略，所以写 Gulpfile.js 的时候，你只需要了解4个 Gulp 的方法<code>gulp.task(), gulp.src(), gulp.dest(), gulp.watch()</code> 就可以了，即使你要写配置文件（比如项目的构建目录是哪里，css文件的目录又是哪个，你可以写个JSON来标明），那这个配置文件的格式也是掌握在你自己的手里，想怎么写就怎么写，根本不用关心具体的格式，只要声明完格式，待会自己用到的时候记得就好了。</p>
<p>所以，最终通俗点说，那就是一个是写配置文件，一个是写代码。这一点，对于大部分的程序猿来说，应该都会更乐意倾向于后者。</p>
<h6 id="其次从构建过程来剖析"><a href="#其次从构建过程来剖析" class="headerlink" title="其次从构建过程来剖析"></a>其次从构建过程来剖析</h6><p>Grunt 是基于文件的形式进行构建的，所以使用 Grunt 的 I/O 过程中会产生一些中间态的临时文件，A任务处理完会生成一个临时文件，B任务会读取这个临时文件，继续做自己的操作，然后再生成一个临时文件，给C任务用，以此类推，其它任务可能会基于临时文件再做处理并生成最终的构建后文件。</p>
<p>而使用 Gulp 的优势就是利用流的方式进行文件的处理，通过管道将多个任务和操作连接起来，因此只有一次 I/O 的过程，流程更清晰，更纯粹，构建速度也要比 Grunt 快。 当然，如果构建的项目很小，可能差距就体现不出来了。</p>
<p>这一点，我们可以从以下两张图来更加形象地得到了解：</p>
<p><img src="http://sunshinewu.github.io/images/gulp_1.gif" alt=""></p>
<p><img src="http://sunshinewu.github.io/images/gulp_2.gif" alt=""></p>
<p>所以，简单地从这两点，应该能感受到为何大家越来越多人使用 Gulp 了的原因了吧？ 不过，也不能一刀切得这么着急得下定论，具体孰优孰劣，或各有千秋，一切看时间，由时间去证明吧。 接下来，我们就重点来说说Gulp的使用。</p>
<h1 id="Gulp之快速上手"><a href="#Gulp之快速上手" class="headerlink" title="Gulp之快速上手"></a>Gulp之快速上手</h1><p>1、首先确保你已经正确安装了 <code>nodejs</code> 环境。然后以全局方式安装 <code>Gulp</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g gulp</div></pre></td></tr></table></figure>
<p>2、全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行（至于为什么在全局安装gulp后，还需要在项目中本地安装一次，有兴趣的可以看下stackoverflow上有人做出的回答：<a href="http://stackoverflow.com/questions/22115400/why-do-we-need-to-install-gulp-globally-and-locally" target="_blank" rel="external">why-do-we-need-to-install-gulp-globally-and-locally</a>、<a href="http://stackoverflow.com/questions/25713618/what-is-the-point-of-double-install-in-gulp" target="_blank" rel="external">what-is-the-point-of-double-install-in-gulp</a>。大体就是为了版本的灵活性，但如果没理解那也不必太去纠结这个问题，只需要知道通常我们是要这样做就行了。）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp</div></pre></td></tr></table></figure>
<p>如果想在安装的时候把gulp写进项目package.json文件的依赖中，则可以加上–save-dev：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>
<p>这样就完成了gulp的安装。</p>
<p>3、在项目根目录创建gulpfile.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>4、运行gulp</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp</div></pre></td></tr></table></figure>
<p>默认任务将被运行，向控制台输出 hello world 。 如果需要运行单个任务, 使用 <code>gulp taskname</code> 命令。</p>
<h1 id="Gulp之API四大核心点"><a href="#Gulp之API四大核心点" class="headerlink" title="Gulp之API四大核心点"></a>Gulp之API四大核心点</h1><h3 id="gulp-src-globs-options"><a href="#gulp-src-globs-options" class="headerlink" title="gulp.src(globs[, options])"></a>gulp.src(globs[, options])</h3><p><code>gulp.src()</code>方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息。</p>
<p><strong>globs</strong>参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。</p>
<p><strong>options</strong>为可选参数。通常情况下我们不需要用到，暂不考虑。</p>
<h5 id="文件匹配技巧。"><a href="#文件匹配技巧。" class="headerlink" title="文件匹配技巧。"></a>文件匹配技巧。</h5><p>Gulp内部使用了<code>node-glob</code>模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>
<ul>
<li><code>*</code> 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾</li>
<li><code>**</code> 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>
<li><code>?</code> 匹配文件路径中的一个字符(不会匹配路径分隔符)</li>
<li><code>[...]</code> 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法</li>
<li><code>!(pattern|pattern|pattern)</code> 匹配任何与括号中给定的任一模式都不匹配的</li>
<li><code>?(pattern|pattern|pattern)</code> 匹配括号中给定的任一模式0次或1次，类似于js正则中的<code>(pattern|pattern|pattern)?</code></li>
<li><code>+(pattern|pattern|pattern)</code> 匹配括号中给定的任一模式至少1次，类似于js正则中的<code>(pattern|pattern|pattern)+</code></li>
<li><code>*(pattern|pattern|pattern)</code> 匹配括号中给定的任一模式0次或多次，类似于js正则中的<code>(pattern|pattern|pattern)*</code></li>
<li><code>@(pattern|pattern|pattern)</code> 匹配括号中给定的任一模式1次，类似于js正则中的<code>(pattern|pattern|pattern)</code></li>
</ul>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><ul>
<li><code>*</code> 能匹配 <code>a.js</code>,<code>x.y</code>,<code>abc</code>,<code>abc/</code>,但不能匹配<code>a/b.js</code></li>
<li><code>*.*</code> 能匹配 <code>a.js</code>,<code>style.css</code>,<code>a.b</code>,<code>x.y</code></li>
<li><code>*/*/*.js</code> 能匹配 <code>a/b/c.js</code>,<code>x/y/z.js</code>,不能匹配<code>a/b.js</code>,<code>a/b/c/d.js</code></li>
<li><code>**</code> 能匹配 <code>abc</code>,<code>a/b.js</code>,<code>a/b/c.js</code>,<code>x/y/z</code>,<code>x/y/z/a.b</code>,能用来匹配所有的目录和文件</li>
<li><code>**/*.js</code> 能匹配 <code>foo.js</code>,<code>a/foo.js</code>,<code>a/b/foo.js</code>,<code>a/b/c/foo.js</code></li>
<li><code>a/**/z</code> 能匹配 <code>a/z</code>,<code>a/b/z</code>,<code>a/b/c/z</code>,<code>a/d/g/h/j/k/z</code></li>
<li><code>a/**b/z</code> 能匹配 <code>a/b/z</code>,<code>a/sb/z</code>,但不能匹配<code>a/x/sb/z</code>,因为只有单<code>**</code>单独出现才能匹配多级目录</li>
<li><code>?.js</code> 能匹配 <code>a.js</code>,<code>b.js</code>,<code>c.js</code></li>
<li><code>a??</code> 能匹配 <code>a.b</code>,<code>abc</code>,但不能匹配<code>ab/</code>,因为它不会匹配路径分隔符</li>
<li><code>[xyz].js</code> 只能匹配 <code>x.js</code>,<code>y.js</code>,<code>z.js</code>,不会匹配<code>xy.js</code>,<code>xyz.js</code>等,整个中括号只代表一个字符</li>
<li><code>[^xyz].js</code> 能匹配 <code>a.js</code>,<code>b.js</code>,<code>c.js</code>等,不能匹配<code>x.js</code>,<code>y.js</code>,<code>z.js</code></li>
</ul>
<p>当有多种匹配模式时可以使用数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用数组的方式来匹配多种文件</span></div><div class="line">gulp.src([<span class="string">'js/*.js'</span>,<span class="string">'css/*.css'</span>,<span class="string">'*.html'</span>])</div></pre></td></tr></table></figure>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上<code>!</code>即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gulp.src([*.js,<span class="string">'!b*.js'</span>]) <span class="comment">//匹配所有js文件，但排除掉以b开头的js文件</span></div><div class="line">gulp.src([<span class="string">'!b*.js'</span>,*.js]) <span class="comment">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></div></pre></td></tr></table></figure>
<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式相加起来得到的结果。展开的例子如下：</p>
<ul>
<li><code>a{b,c}d</code> 会展开为 <code>abd</code>,<code>acd</code></li>
<li><code>a{b,}c</code> 会展开为 <code>abc</code>,<code>ac</code></li>
<li><code>a{0..3}d</code> 会展开为 <code>a0d</code>,<code>a1d</code>,<code>a2d</code>,<code>a3d</code></li>
<li><code>a{b,c{d,e}f}g</code> 会展开为 <code>abg</code>,<code>acdfg</code>,<code>acefg</code></li>
<li><code>a{b,c}d{e,f}g</code> 会展开为 <code>abdeg</code>,<code>acdeg</code>,<code>abdeg</code>,<code>abdfg</code></li>
</ul>
<h3 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[,options])"></a>gulp.dest(path[,options])</h3><p><strong>path</strong>为写入文件的路径</p>
<p><strong>options</strong>为一个可选的参数对象，通常我们不需要用到</p>
<p>要想使用好<code>gulp.dest()</code>这个方法，就要理解给它传入的路径参数与最终生成的文件的关系。</p>
<p>gulp的使用流程一般是这样子的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp的插件中，最后把经过插件处理后的流再通过pipe方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚的一点是，我们给<code>gulp.dest()</code>传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当做是目录名，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.src(<span class="string">'script/jquery.js'</span>)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/foo.js'</span>));</div><div class="line"><span class="comment">//最终生成的文件路径为 dist/foo.js/jquery.js,而不是dist/foo.js</span></div></pre></td></tr></table></figure>
<p>要想改变文件名，可以使用插件gulp-rename</p>
<p>下面说说生成的文件路径与我们给<code>gulp.dest()</code>方法传入的路径参数之间的关系。<br><code>gulp.dest(path)</code>生成的文件路径是我们传入的<code>path</code>参数后面再加上<code>gulp.src()</code>中有通配符开始出现的那部分路径。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = reruire(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/*.js</span></div><div class="line">gulp.src(<span class="string">'script/**/*.js'</span>)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//最后生成的文件路径为 dist/**/*.js</span></div><div class="line"><span class="comment">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ,则生成的文件路径为 dist/jquery/jquery.js</span></div></pre></td></tr></table></figure>
<p>再举更多一点的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'script/avalon/avalon.js'</span>) <span class="comment">//没有通配符出现的情况</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//最后生成的文件路径为 dist/avalon.js</span></div><div class="line"></div><div class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/underscore.js</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'script/**/underscore.js'</span>)</div><div class="line">    <span class="comment">//假设匹配到的文件为script/util/underscore.js</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//则最后生成的文件路径为 dist/util/underscore.js</span></div><div class="line"></div><div class="line">gulp.src(<span class="string">'script/*'</span>) <span class="comment">//有通配符出现的那部分路径为 *</span></div><div class="line">    <span class="comment">//假设匹配到的文件为script/zepto.js    </span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//则最后生成的文件路径为 dist/zepto.js</span></div></pre></td></tr></table></figure>
<p>通过指定<code>gulp.src()</code>方法配置参数中的<code>base</code>属性，我们可以更灵活的来改变<code>gulp.dest()</code>生成的文件路径。<br>当我们没有在<code>gulp.src()</code>方法中配置<code>base</code>属性时，<code>base</code>的默认值为通配符开始出现之前那部分路径，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'app/src/**/*.css'</span>) <span class="comment">//此时base的值为 app/src</span></div></pre></td></tr></table></figure>
<p>上面我们说的<code>gulp.dest()</code>所生成的文件路径的规则，其实也可以理解成，用我们给<code>gulp.dest()</code>传入的路径替换掉<code>gulp.src()</code>中的<code>base</code>路径，最终得到生成文件的路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'app/src/**/*.css'</span>) <span class="comment">//此时base的值为app/src,也就是说它的base路径为app/src</span></div><div class="line">     <span class="comment">//设该模式匹配到了文件 app/src/css/normal.css</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)) <span class="comment">//用dist替换掉base路径，最终得到 dist/css/normal.css</span></div></pre></td></tr></table></figure>
<p>所以改变base路径后，<code>gulp.dest()</code>生成的文件路径也会改变</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.src(script/lib<span class="comment">/*.js) //没有配置base参数，此时默认的base路径为script/lib</span></div><div class="line">    //假设匹配到的文件为script/lib/jquery.js</div><div class="line">    .pipe(gulp.dest('build')) //生成的文件路径为 build/jquery.js</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.src(script/lib<span class="comment">/*.js, &#123;base:'script'&#125;) //配置了base参数，此时base路径为script</span></div><div class="line">    //假设匹配到的文件为script/lib/jquery.js</div><div class="line">    .pipe(gulp.dest('build')) //此时生成的文件路径为 build/lib/jquery.js</div></pre></td></tr></table></figure>
<p>用<code>gulp.dest()</code>把文件流写入文件后，文件流仍然可以继续使用。</p>
<h3 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h3><p><strong>name</strong> 为任务名</p>
<p><strong>deps</strong> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数</p>
<p><strong>fn</strong> 为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mytask'</span>, [<span class="string">'array'</span>, <span class="string">'of'</span>, <span class="string">'task'</span>, <span class="string">'names'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//定义一个有依赖的任务</span></div><div class="line">  <span class="comment">// Do something</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>gulp.task()</code>这个API没什么好讲的，但需要知道执行多个任务时怎么来控制任务执行的顺序。<br>gulp中执行多个任务，可以通过任务依赖来实现。例如我想要执行<code>one</code>,<code>two</code>,<code>three</code>这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只要执行default任务，就相当于把one,two,three这三个任务执行了</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]);</div></pre></td></tr></table></figure>
<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。<br>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//one是一个异步执行的任务</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'one is done'</span>)</div><div class="line">  &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//two任务虽然依赖于one任务,但并不会等到one任务中的异步操作完成后再执行</span></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的例子中我们执行two任务时，会先执行one任务，但不会去等待one任务中的异步操作完成后再执行two任务，而是紧接着执行two任务。所以two任务会在one任务中的异步操作完成之前就执行了。</p>
<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？</p>
<h6 id="有三种方法可以实现："><a href="#有三种方法可以实现：" class="headerlink" title="有三种方法可以实现："></a>有三种方法可以实现：</h6><p>第一：在异步操作完成后执行一个回调函数来通知gulp这个异步任务已经完成,这个回调函数就是任务函数的第一个参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123; <span class="comment">//cb为任务函数提供的回调，用来通知任务已经完成</span></div><div class="line">  <span class="comment">//one是一个异步执行的任务</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'one is done'</span>);</div><div class="line">    cb();  <span class="comment">//执行回调，表示这个异步任务已经完成</span></div><div class="line">  &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//这时two任务会在one任务中的异步操作完成后再执行</span></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>第二：定义任务时返回一个流对象。适用于任务就是操作gulp.src获取到的流的情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> stream = gulp.src(<span class="string">'client/**/*.js'</span>)</div><div class="line">      .pipe(dosomething()) <span class="comment">//dosomething()中有某些异步操作</span></div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">    <span class="keyword">return</span> stream;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>第三：返回一个promise对象，例如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>); <span class="comment">//一个著名的异步处理的库 https://github.com/kriskowal/q</span></div><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> deferred = Q.defer();</div><div class="line">  <span class="comment">// 做一些异步操作</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     deferred.resolve();</div><div class="line">  &#125;, <span class="number">5000</span>);</div><div class="line">  <span class="keyword">return</span> deferred.promise;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>gulp.task()</code>就这些了，主要是要知道当依赖是异步任务时的处理。</p>
<h3 id="gulp-watch-glob-opts-tasks"><a href="#gulp-watch-glob-opts-tasks" class="headerlink" title="gulp.watch(glob[, opts], tasks)"></a>gulp.watch(glob[, opts], tasks)</h3><p><strong>glob</strong> 为要监视的文件匹配模式，规则和用法与<code>gulp.src()</code>方法中的<code>glob</code>相同。</p>
<p><strong>opts</strong> 为一个可选的配置对象，通常不需要用到</p>
<p><strong>tasks</strong> 为文件变化后要执行的任务，为一个数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'uglify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something</span></div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'reload'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something</span></div><div class="line">&#125;);</div><div class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, [<span class="string">'uglify'</span>,<span class="string">'reload'</span>]);</div></pre></td></tr></table></figure>
<p><code>gulp.watch()</code>还有另外一种使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch(glob[, opts, cb])</div></pre></td></tr></table></figure>
<p>glob和opts参数与第一种用法相同<br>cb参数为一个函数。每当监视的文件发生变化时，就会调用这个函数,并且会给它传入一个对象，该对象包含了文件变化的一些信息，<code>type</code>属性为变化的类型，可以是<code>added</code>,<code>changed</code>,<code>deleted</code>；<code>path</code>属性为发生变化的文件的路径</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event.type); <span class="comment">//变化类型 added为新增,deleted为删除，changed为改变 </span></div><div class="line">    <span class="built_in">console</span>.log(event.path); <span class="comment">//变化的文件的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="顺便附上常用的Gulp插件"><a href="#顺便附上常用的Gulp插件" class="headerlink" title="顺便附上常用的Gulp插件"></a>顺便附上常用的Gulp插件</h1><h3 id="js文件压缩"><a href="#js文件压缩" class="headerlink" title="js文件压缩"></a>js文件压缩</h3><p>使用gulp-uglify</p>
<p>安装：<code>npm install --save-dev gulp-uglify</code></p>
<p>用来压缩js文件，使用的是uglify引擎</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>) <span class="comment">// 要压缩的js文件</span></div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>)); <span class="comment">//压缩后的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><p>使用gulp-rename<br>安装：<code>npm install --save-dev gulp-rename</code><br>用来重命名文件流中的文件。用<code>gulp.dest()</code>方法写入文件时，文件名使用的是文件流中的文件名，如果要想改变文件名，那可以在之前用<code>gulp-rename</code>插件来改变文件流中的文件名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'rename'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/jquery.js'</span>)</div><div class="line">    .pipe(uglify())  <span class="comment">//压缩</span></div><div class="line">    .pipe(rename(<span class="string">'jquery.min.js'</span>)) <span class="comment">//会将jquery.js重命名为jquery.min.js</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="压缩css文件"><a href="#压缩css文件" class="headerlink" title="压缩css文件"></a>压缩css文件</h3><p>使用gulp-minify-css</p>
<p>安装：<code>npm install --save-dev gulp-minify-css</code></p>
<p>要压缩css文件时可以使用该插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    minifyCss = <span class="built_in">require</span>(<span class="string">"gulp-minify-css"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'css/*.css'</span>) <span class="comment">// 要压缩的css文件</span></div><div class="line">    .pipe(minifyCss()) <span class="comment">//压缩css</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="html文件压缩"><a href="#html文件压缩" class="headerlink" title="html文件压缩"></a>html文件压缩</h3><p>使用gulp-minify-html</p>
<p>安装：<code>npm install --save-dev gulp-minify-html</code></p>
<p>用来压缩html文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    minifyHtml = <span class="built_in">require</span>(<span class="string">"gulp-minify-html"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'html/*.html'</span>) <span class="comment">// 要压缩的html文件</span></div><div class="line">    .pipe(minifyHtml()) <span class="comment">//压缩</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/html'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h3><p>使用gulp-concat</p>
<p>安装：<code>npm install --save-dev gulp-concat</code></p>
<p>用来把多个文件合并为一个文件,我们可以用它来合并js或css文件等，这样就能减少页面的http请求数了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)  <span class="comment">//要合并的文件</span></div><div class="line">    .pipe(concat(<span class="string">'all.js'</span>))  <span class="comment">// 合并匹配到的js文件并命名为 "all.js"</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="less和sass的编译"><a href="#less和sass的编译" class="headerlink" title="less和sass的编译"></a>less和sass的编译</h3><p>less使用gulp-less</p>
<p>安装：<code>npm install --save-dev gulp-less</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    less = <span class="built_in">require</span>(<span class="string">"gulp-less"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'compile-less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'less/*.less'</span>)</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>sass使用gulp-sass</p>
<p>安装：<code>npm install --save-dev gulp-sass</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">"gulp-sass"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'compile-sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'sass/*.sass'</span>)</div><div class="line">    .pipe(sass())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="处理html"><a href="#处理html" class="headerlink" title="处理html"></a>处理html</h3><p>使用gulp-processhtml</p>
<p>安装：<code>npm install --save-dev gulp-processhtml</code></p>
<p>在构建时处理按你设想的修改html文件，比如说你构建之前你有N个脚本需要引入到html页面中，构建之后可能这N个文件被合并成了一个，这时候引入的地方也需要做相应的调整，那么差个插件就能派上用场了。<br>插件使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"processhtml"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'../main.html'</span>)</div><div class="line">        .pipe(processhtml())</div><div class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>main.html构建之前的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html ng-app="app"&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;meta name="viewport"</div><div class="line">          content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;</div><div class="line">    &lt;meta name="format-detection" content="telephone=no"/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/base.css?/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/index.css?/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;ui-view&gt;&lt;/ui-view&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;!-- build:js js/libs/libs.min.js --&gt; &lt;!--process-html插件需要用到这个注释-- &gt;</div><div class="line">&lt;script src="js/libs/angular.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/angular.touch.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/zepto.20140520.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/angular.ui.bootstrap.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/angular-sanitize.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/angular-ui-route.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/fastclick.0.6.7.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/libs/carous.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- /build --&gt; &lt;!--process-html插件需要用到这个注释--&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>main.html构建之后</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html ng-app="app"&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;meta name="viewport"</div><div class="line">          content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;</div><div class="line">    &lt;meta name="format-detection" content="telephone=no"/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/base.css?/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/index.css?/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;ui-view&gt;&lt;/ui-view&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src="js/libs/libs.min.js"&gt;&lt;/script&gt; &lt;!--注意这里的变化--&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>使用gulp-replace</p>
<p>安装：<code>npm install --save-dev gulp-replace</code></p>
<p>可以替换html或者txt等文件内的字符串为你想要的。<br>比如我每次构建的时候都需要去修改引用的文件的版本号，就可以使用这个插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"replace"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    gulp.src(<span class="string">'../main.html'</span>)</div><div class="line">        .pipe(replace(<span class="regexp">/_VERSION_/gi</span>, date))</div><div class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>main.html文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html ng-app="app"&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;meta name="viewport"</div><div class="line">          content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;</div><div class="line">    &lt;meta name="format-detection" content="telephone=no"/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/base.css?v=_VERSION_"/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/index.css?v=_VERSION_"/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;ui-view&gt;&lt;/ui-view&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src="js/config/config.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/app.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/service/TrackDataService.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/service/APIService.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/service/DService.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/controllers/indexCtrl.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/directive/lazy.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/directive/slider.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/filter/filters.js?v=_VERSION_"&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>构建之后，<code>_VERSION_</code>被替换为时间戳。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html ng-app="app"&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;meta name="viewport"</div><div class="line">          content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;</div><div class="line">    &lt;meta name="format-detection" content="telephone=no"/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/base.css?v=1433405631860"/&gt;</div><div class="line">    &lt;link rel="stylesheet" href="style/index.css?v=1433405631860"/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;ui-view&gt;&lt;/ui-view&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src="js/config/config.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/app.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/service/TrackDataService.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/service/APIService.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/service/DService.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/controllers/indexCtrl.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/directive/lazy.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/directive/slider.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="js/filter/filters.js?v=1433405631860"&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>gulp还有很多插件，大家可以去<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">gulp官网</a>查看</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>引用大神这一句来做个结尾：No Need To Grunt, Take A Gulp Of Fresh Air.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;大环境所思&quot;&gt;&lt;a href=&quot;#大环境所思&quot; class=&quot;headerlink&quot; title=&quot;大环境所思&quot;&gt;&lt;/a&gt;大环境所思&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Node&lt;/strong&gt; 阵营这两年一下子打了不少鸡血，光从 &lt;strong&gt;npm&lt;/strong&gt; 这名目繁多的各类 Packages \ Libraries 急剧增长的速度就可以亲切又深刻滴感受到啊！这带来各种开发易用性，便利性，高效率的轮子同时，也带来了一些苦恼。什么？我刚&lt;code&gt;npm install&lt;/code&gt;完准备要学的 XXX 库就这么被告知过时了？！ 神马？现在又流行 XXXX 了！ 好吧，慢慢地你会不自觉地被前端火热的这世界一点点在冲击着你的认知，好像前端的世界，永远没完没了地各种颠覆，各种折腾。以致，你会时常不由自主地产生这么一个疑问：为什么我们不能在JavaScript的地盘上多消停一会儿？&lt;center&gt;&lt;img src=&quot;http://sunshinewu.github.io/images/Gulpjs.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Gulp" scheme="http://sunshinewu.github.io/categories/Gulp/"/>
    
    
      <category term="JavaScript" scheme="http://sunshinewu.github.io/tags/JavaScript/"/>
    
      <category term="Gulp" scheme="http://sunshinewu.github.io/tags/Gulp/"/>
    
      <category term="Grunt" scheme="http://sunshinewu.github.io/tags/Grunt/"/>
    
      <category term="前端构建" scheme="http://sunshinewu.github.io/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="前端工程" scheme="http://sunshinewu.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="管道" scheme="http://sunshinewu.github.io/tags/%E7%AE%A1%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>「SmartJD」 一览京东全端价格的小插件</title>
    <link href="http://sunshinewu.github.io/2016/08/23/SmartJD/"/>
    <id>http://sunshinewu.github.io/2016/08/23/SmartJD/</id>
    <published>2016-08-23T12:01:17.000Z</published>
    <updated>2016-08-25T19:03:13.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在公交地铁上下班的路上，在与亲朋好友相聚的场合下，无论在哪一个场景，但凡一有空，一个个都成了不折不扣的低头族的当下，谈及移动互联网神马的已经不新鲜了，对于企业应用及市场拓展而言，移动互联这块的业务已经处于最重中之重的地位。这几年的电商，也一样，各自推出了各自的移动端产品。</p>
<p>好比京东，移动端总共就有三个，有APP端，微信端，QQ端…对于类似像我这样一个京东“<strong>重度买买买</strong>”的用户，你懂的，京东的价格变动异常大之外，京东各平台端的价格也差异较大！否则，当你不知情下单的时候，付完款你就哭了:) <center><img src="http://sunshinewu.github.io/images/SmartJD.gif"></center></p>
<p> <a id="more"></a> 这样一来，每次我所想了解一个商品的时候，看完京东的PC端价格之后，还想看看其他端的价格，总得费劲得拿起手机，先是打开京东APP看看，然后再打开微信看看，最后再打开QQ…心好累-_-|  其实也有其它类似的一些软件\插件可以解决，但还是嫌弃他们太多的广告及多余无用功能，那还能更简洁更直接更有效率一点的么？</p>
<p>当然！程序猿，改变世界滴银啊！！</p>
<h1 id="「SmartJD」京东比比看"><a href="#「SmartJD」京东比比看" class="headerlink" title="「SmartJD」京东比比看"></a>「SmartJD」京东比比看</h1><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><p>「SmartJD」 —— 致力于为用户在浏览京东商品页面时（包含京东自营，京东全球购，京东医药等）提供PC端、APP端、微信端、手机QQ端全方位价格一览显示，并呈现对京东商城的商品库存全国实时查询。</p>
<p>所以，别的功能，我暂时都没接着整，目前就提供了两个核心：</p>
<ul>
<li>全平台端价格一览显示</li>
<li>商品库存全国实时一键查询</li>
</ul>
<h2 id="疗效还得看效果图"><a href="#疗效还得看效果图" class="headerlink" title="疗效还得看效果图"></a>疗效还得看效果图</h2><h5 id="图一：价格展示"><a href="#图一：价格展示" class="headerlink" title="图一：价格展示"></a>图一：价格展示</h5><p><img src="http://sunshinewu.github.io/images/SmartJD_1.gif" alt=""></p>
<h5 id="图二：库存全国查询"><a href="#图二：库存全国查询" class="headerlink" title="图二：库存全国查询"></a>图二：库存全国查询</h5><p><img src="http://sunshinewu.github.io/images/SmartJD_2.gif" alt=""></p>
<h2 id="实现原理简述"><a href="#实现原理简述" class="headerlink" title="实现原理简述"></a>实现原理简述</h2><ul>
<li>利用Fiddler等工具对京东各移动端进行数据抓包及整理所需数据</li>
<li>分析京东商品PC端页面的源码</li>
<li>利用<a href="http://developer.chrome.com/extensions/content_scripts.html" target="_blank" rel="external">Chrome Content Scripts</a> 将相关JavaScript实现注入页面</li>
</ul>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>由于没支付 Google 5美金，So就没办法上传到Google应用商店啦，想用的童鞋，直接点击<a href="https://github.com/sunshinewu/SmartJD/raw/master/release/SmartJD.crx" target="_blank" rel="external">这里</a>下载吧</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>前端，魅力无限，不仅仅只是写写页面，切切图，用上JS大法，一切皆新生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在公交地铁上下班的路上，在与亲朋好友相聚的场合下，无论在哪一个场景，但凡一有空，一个个都成了不折不扣的低头族的当下，谈及移动互联网神马的已经不新鲜了，对于企业应用及市场拓展而言，移动互联这块的业务已经处于最重中之重的地位。这几年的电商，也一样，各自推出了各自的移动端产品。&lt;/p&gt;
&lt;p&gt;好比京东，移动端总共就有三个，有APP端，微信端，QQ端…对于类似像我这样一个京东“&lt;strong&gt;重度买买买&lt;/strong&gt;”的用户，你懂的，京东的价格变动异常大之外，京东各平台端的价格也差异较大！否则，当你不知情下单的时候，付完款你就哭了:) &lt;center&gt;&lt;img src=&quot;http://sunshinewu.github.io/images/SmartJD.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Chrome Extension" scheme="http://sunshinewu.github.io/categories/Chrome-Extension/"/>
    
    
      <category term="JavaScript" scheme="http://sunshinewu.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://sunshinewu.github.io/tags/CSS/"/>
    
      <category term="Chrome" scheme="http://sunshinewu.github.io/tags/Chrome/"/>
    
      <category term="插件" scheme="http://sunshinewu.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="京东" scheme="http://sunshinewu.github.io/tags/%E4%BA%AC%E4%B8%9C/"/>
    
      <category term="比价格" scheme="http://sunshinewu.github.io/tags/%E6%AF%94%E4%BB%B7%E6%A0%BC/"/>
    
      <category term="jQuery" scheme="http://sunshinewu.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>「FunFace」用一张粉嫩的小脸，来谈谈HTML5 Canvas的某些玩意儿</title>
    <link href="http://sunshinewu.github.io/2016/07/29/FunFace/"/>
    <id>http://sunshinewu.github.io/2016/07/29/FunFace/</id>
    <published>2016-07-28T17:01:17.000Z</published>
    <updated>2016-08-25T19:02:08.834Z</updated>
    
    <content type="html"><![CDATA[<p>这年头，HTML5火遍大江南北呀，神马？火遍全球？对！（在国内跟着火的，还有一个叫“H5”的名儿，具体你懂的）</p>
<p>跟着它顺便火的，还有个HTML5的新标签，叫<strong>Canvas</strong>，专门用于Web界面画画图，搞点交互，模拟，游戏啥的。虽然大家都称Canvas为HTML5的新标签，看起来好像跟HTML语言有什么关联似的，但其实Canvas画图是通过JavaScript来实现的。所以，如果你想学习Canvas画图，你最好要有一定的JavaScript基础。<center><img src="http://sunshinewu.github.io/images/FunFace.gif"></center></p>
<p> <a id="more"></a> </p>
<p></p><h1>前言</h1><br>提到画图，现实下对于没啥美术天赋及基础滴人来说，那简直不易，就是再怎么画，明明你心目中想画的是白龙马，结果画完画风一变成了草泥马-_-| 而程序里头，这画图涉及到图形学，也不易啊，若还想在静态图形的基础上配个动画，啧啧，必须用上各种小学中学乃至大学各种数学物理知识，那个时候，瞬间发现，原来学了介么多年的数理化，总算有用武之地了，那个内牛满面。<p></p>
<p>“说了这么多不相干的啰嗦，你说，那今天我们到底要整啥？！” ——路人甲</p>
<p>“来，别急嘛，我们先上一张可爱的效果图”</p>
<p></p><h2>一张粉嫩的欢乐脸</h2><p></p>
<center><br><img src="http://sunshinewu.github.io/images/RecordFunFace.gif" alt=""><br></center>

<p>我嘞个去，有点意思嘛！</p>
<h1 id="How-to-do-it-肿么实现"><a href="#How-to-do-it-肿么实现" class="headerlink" title="How to do it 肿么实现?"></a>How to do it 肿么实现?</h1><p>想看整个实现的所有源文件？请访问<a href="https://github.com/sunshinewu/FunFace" target="_blank" rel="external">全球最大“同性”交友平台GitHub FunFace</a>了解，想切身体验一下？请不必客气地点击此<a href="https://sunshinewu.github.io/FunFace/">Demo</a></p>
<p>光这样就行？那我一些关键点还是看不懂啊啊啊~好吧，俺把源码重点部分该注释的都重新注释助于理解之外，并抽取其中的一些核心代码来谈谈HTML5 Canvas的一些东东。</p>
<h2 id="核心一"><a href="#核心一" class="headerlink" title="核心一"></a>核心一</h2><p>先定义一个init函数进行一个<strong>初始化</strong>的工作，将画布的宽高、鼠标的位置坐标、瞳孔的归位控制、眼睛的位置及半径等等变量做初始化。这里会涉及到一个重要的核心点——<strong>requestAnimationFrame</strong></p>
<p>起初，我们要完成一些动画效果的话，会经常使用window.setTimout()或者window.setInterval()来定时不断更新元素的DOM状态位置等来实现动画（画面的更新频率必须要达到每秒60次才能让肉眼看到流畅的动画效果）。不过，这样实现动画的方式极为耗费资源，经常出现这样的情况，刚开始比较流畅，几分钟之后动画可能就不行了。</p>
<p>如今，HTML5/CSS3时代，我们要想在Web里实现一些动画，可选择性已经丰富了很多。借助requestAnimationFrame，CSS3的transition，CSS3的animattion+keyframes等等都能实现想要的一些动画。但是，CSS3动画还是有不少局限性，比如不是所有属性都能参与动画、动画缓动效果太少、无法完全控制动画过程等等，所以有的时候我们还是不得不使用setTimeout或setInterval的方式来实现动画，可setTimeout和setInterval有着严重的性能问题，虽然某些现代浏览器对这两函数进行了一些优化，但还是无法跟CSS3的动画性能相提并论。这个时候，就该requestAnimationFrame上场了，这次这个案例主要就是通过requestAnimationFrame来实现。</p>
<h3 id="关于requestAnimationFrame"><a href="#关于requestAnimationFrame" class="headerlink" title="关于requestAnimationFrame"></a>关于requestAnimationFrame</h3><p>来看下<a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" target="_blank" rel="external">Mozilla MDN</a>给出的诠释：</p>
<blockquote>
<p>The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.</p>
</blockquote>
<p>也就说，window.requestAnimationFrame()这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数，以满足开发者操作动画的需求。这个方法接受一个函数为参，该函数会在重绘前进行调用。</p>
<p>这个方法的原理，其实大致跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果，但比setTimeout/setInterval更具优势：</p>
<ul>
<li>浏览器自动专门优化，且重绘的时间间隔紧紧跟随浏览器的刷新频率，动画更流畅；</li>
<li>若页面不是激活状态（隐藏或不可见）下，动画会自动暂停，有效节省CPU、GPU及内存开销；</li>
</ul>
<h4 id="使用语法："><a href="#使用语法：" class="headerlink" title="使用语法："></a>使用语法：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.requestAnimationFrame(callback);</div></pre></td></tr></table></figure>
<h4 id="浏览器最新支持情况"><a href="#浏览器最新支持情况" class="headerlink" title="浏览器最新支持情况"></a>浏览器最新支持情况</h4><p>就目前来说，主流现代浏览器都对它提供了较好的支持，包括IE10+，Firefox，Chrome，Safari，Opera等，在移动设备上，除了Opera Mini之外也都支持requestAnimationFrame，如下图所示：</p>
<center><br><img src="http://sunshinewu.github.io/images/requestAnimationFrameSupport.gif" alt=""><br></center>


<h4 id="浏览器Polyfill兼容延伸"><a href="#浏览器Polyfill兼容延伸" class="headerlink" title="浏览器Polyfill兼容延伸"></a>浏览器Polyfill兼容延伸</h4><p>支持requestAnimationFrame的浏览器有些还是自己的私有实现，所以有些还得加前缀，对于不支持requestAnimationFrame的浏览器，我们只能使用setTimeout，因为两者的使用方式几近相同，所以这两者的兼容并不难。对于支持requestAnimationFrame的浏览器，我们使用requestAnimationFrame，而不支持的我们优雅降级使用传统的setTimeout。以下为封装后统一能兼容各大浏览器的API。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> prefixes = <span class="string">'webkit moz ms o'</span>.split(<span class="string">' '</span>); <span class="comment">//各浏览器前缀</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame;</div><div class="line"><span class="keyword">var</span> cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame;</div><div class="line"></div><div class="line"><span class="keyword">var</span> prefix;</div><div class="line"><span class="comment">//通过遍历各浏览器前缀，来得到requestAnimationFrame和cancelAnimationFrame在当前浏览器的实现形式</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prefixes.length; i++ ) &#123;</div><div class="line">    <span class="keyword">if</span> ( requestAnimationFrame &amp;&amp; cancelAnimationFrame ) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    prefix = prefixes[i];</div><div class="line">    requestAnimationFrame = requestAnimationFrame || <span class="built_in">window</span>[ prefix + <span class="string">'RequestAnimationFrame'</span> ];</div><div class="line">    cancelAnimationFrame  = cancelAnimationFrame  || <span class="built_in">window</span>[ prefix + <span class="string">'CancelAnimationFrame'</span> ] || <span class="built_in">window</span>[ prefix + <span class="string">'CancelRequestAnimationFrame'</span> ];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果当前浏览器不支持requestAnimationFrame和cancelAnimationFrame，则会退到setTimeout</span></div><div class="line"><span class="keyword">if</span> ( !requestAnimationFrame || !cancelAnimationFrame ) &#123;</div><div class="line">    requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params"> callback, element </span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">      <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></div><div class="line">      <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max( <span class="number">0</span>, <span class="number">16</span> - ( currTime - lastTime ) ); </div><div class="line">      <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        callback( currTime + timeToCall );</div><div class="line">      &#125;, timeToCall );</div><div class="line">      lastTime = currTime + timeToCall;</div><div class="line">      <span class="keyword">return</span> id;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params"> id </span>) </span>&#123;</div><div class="line">      <span class="built_in">window</span>.clearTimeout( id );</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到兼容各浏览器的API</span></div><div class="line"><span class="built_in">window</span>.requestAnimationFrame = requestAnimationFrame; </div><div class="line"><span class="built_in">window</span>.cancelAnimationFrame = cancelAnimationFrame;</div></pre></td></tr></table></figure>
<h2 id="核心二"><a href="#核心二" class="headerlink" title="核心二"></a>核心二</h2><p>我们画画以及实现动画的基础，是确定好每一个画中的元素的坐标，半径，移动方式，移动速度等等，只有确定好了这些数据，才能进行下一步的绘画过程，这就好比炒一个菜，你得先准备好食材，才能进行下一步的加工烹饪。</p>
<p>我们这个案例最重要的就是确定跟随鼠标位置移动的瞳孔如何绘制，这就涉及到瞳孔的中心点（pupilX, pupilY）的实时位置，涉及到如何计算两点之间距离，为了有动画效果还要计算出加速度及偏移量的弹动等等。</p>
<p>比如这次案例里当鼠标移动时所要计算的“鼠标所在点位置”与“眼睛中心点”两点的距离。一般来说，如果是计算任意两点的距离，有两种方法：一种利用<strong>勾股定理</strong>计算，适用于两点距离很近的情况；一种按标准的球面大圆劣弧长度计算，适用于距离较远的情况。我们这次主要采用前者进行计算。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dx = mx - <span class="keyword">this</span>.x, </div><div class="line">    dy = my - <span class="keyword">this</span>.y,</div><div class="line">    dist = <span class="built_in">Math</span>.sqrt(dx * dx + dy * dy);  <span class="comment">//计算“鼠标所在点位置”与“眼睛中心点”两点的距离</span></div></pre></td></tr></table></figure>
<p>通过以上计算，就可以算出两点的距离。除了距离，我们还得计算出偏移的角度来，可通过下面计算得出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.angle = <span class="built_in">Math</span>.atan2(dy, dx);  <span class="comment">//偏移角度</span></div></pre></td></tr></table></figure>
<p><strong>偏移角度</strong>拿来做什么呢？主要是用来进行下一步计算得到<strong>加速度</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.cos(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.magnitude  <span class="comment">//magnitude为移动距离，大概的范围是：0 =&lt; 移动距离 &lt;= magnitudeMax</span></div></pre></td></tr></table></figure>
<p>最终我们计算出加速度下的<strong>偏移量弹动值 + 瞳孔原坐标值 = 最新瞳孔的中心坐标</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.pupilX += ((<span class="keyword">this</span>.x + <span class="built_in">Math</span>.cos(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.magnitude) - <span class="keyword">this</span>.pupilX) * <span class="number">0.1</span>;  </div><div class="line"><span class="comment">//X轴瞳孔中心偏移量的弹动  0.1为弹性系数</span></div><div class="line"><span class="keyword">this</span>.pupilY += ((<span class="keyword">this</span>.y + <span class="built_in">Math</span>.sin(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.magnitude) - <span class="keyword">this</span>.pupilY) * <span class="number">0.1</span>; </div><div class="line"> <span class="comment">//Y轴瞳孔中心偏移量的弹动</span></div></pre></td></tr></table></figure>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>待所有的数据都确定准备好了，就可以完成最终的简单绘画过程了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Eye.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//画眼睛及眼眶</span></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radius, <span class="number">0</span>, <span class="number">2</span> * PI);</div><div class="line">    ctx.fillStyle = <span class="string">'#FFFFFF'</span>;</div><div class="line">    ctx.fill();</div><div class="line">    ctx.lineWidth = <span class="number">5</span>;</div><div class="line">    ctx.strokeStyle = <span class="string">'#424031'</span>;</div><div class="line">    ctx.stroke();</div><div class="line">    <span class="comment">//画瞳孔</span></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="keyword">this</span>.pupilX, <span class="keyword">this</span>.pupilY, <span class="keyword">this</span>.pupilRadius, <span class="number">0</span>, <span class="number">2</span> * PI);</div><div class="line">    ctx.fillStyle = <span class="string">'#424031'</span>;</div><div class="line">    ctx.fill();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画嘴巴</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(width / <span class="number">2</span>, height * <span class="number">0.65</span>, <span class="number">100</span>, <span class="number">0</span>, PI);</div><div class="line">ctx.fillStyle = <span class="string">'#424031'</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>此刻，一个粉嫩的欢乐小脸，出现在了你的面前 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这年头，HTML5火遍大江南北呀，神马？火遍全球？对！（在国内跟着火的，还有一个叫“H5”的名儿，具体你懂的）&lt;/p&gt;
&lt;p&gt;跟着它顺便火的，还有个HTML5的新标签，叫&lt;strong&gt;Canvas&lt;/strong&gt;，专门用于Web界面画画图，搞点交互，模拟，游戏啥的。虽然大家都称Canvas为HTML5的新标签，看起来好像跟HTML语言有什么关联似的，但其实Canvas画图是通过JavaScript来实现的。所以，如果你想学习Canvas画图，你最好要有一定的JavaScript基础。&lt;center&gt;&lt;img src=&quot;http://sunshinewu.github.io/images/FunFace.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://sunshinewu.github.io/categories/HTML5/"/>
    
    
      <category term="JavaScript" scheme="http://sunshinewu.github.io/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="http://sunshinewu.github.io/tags/HTML5/"/>
    
      <category term="Canvas" scheme="http://sunshinewu.github.io/tags/Canvas/"/>
    
      <category term="动画" scheme="http://sunshinewu.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="animation" scheme="http://sunshinewu.github.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>【JavaScript奇葩之美Ver.1】var，确定你真的会使它么？</title>
    <link href="http://sunshinewu.github.io/2016/05/11/js-fun-var/"/>
    <id>http://sunshinewu.github.io/2016/05/11/js-fun-var/</id>
    <published>2016-05-10T17:01:17.000Z</published>
    <updated>2016-08-25T19:03:02.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在茫茫前端路各种<strong>专业化、对象化、工程化</strong>的今天，你以为光会切个图写点<strong>DIV\CSS</strong>就能称前端了？</p>
<p>在Node.js火爆当道，在AngularJS\Express\Vue\React等各种框架层出不穷之时，万变不离其宗，唯一能让自己心安的，或许还是老老实实一点点打下扎实高端大气上档次的JavaScript基础，玩转玩遍它才是王道呀。自从学习JavaScript以来，它的无拘无束的「自由」实在令人印象深刻且赞，但同时也带来太多的奇葩与有些别扭的语法糖。<center><img src="http://sunshinewu.github.io/images/2.gif"></center></p>
<p><a id="more"></a> </p>
<p>其实，换个角度出发，这些有时候让人不那么愉快的一面，不也正是JavaScript独特的美和气质么？OK，接下来我就一点点把平常遇到的一些“美”给记录下来，以供小伙伴们一同欣赏:)</p>
<h1 id="发现美"><a href="#发现美" class="headerlink" title="发现美"></a>发现美</h1><p>前两天在V2EX看到一个童鞋的疑问：</p>
<blockquote>
<p>JavaScript 里 var x = i = 0 这个写法是什么意思呢?</p>
</blockquote>
<p>这还有啥意思！不就是最最最简单的赋值语句嘛！C\C++\Java等各种语言都有的嘛！ </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int x = i = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>打完收工！奏是这么简单，哟嘿哟嘿~</p>
<p>等等，既然你这么问，想必来者不善，不妨又是给我埋的一个坑吧~~那我们来动手看看是否有坑！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wss</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = i = <span class="number">0</span>;</div><div class="line">&#125; </div><div class="line">wss(); </div><div class="line">alert(x); <span class="comment">//'x' is not defined 这个结果正常嘛!毕竟函数内变量的作用范围是局限在函数内部的哟~</span></div><div class="line">alert(i); <span class="comment">//0 卧槽！肿么可以输出0来！！！恭喜你，果断入坑！</span></div></pre></td></tr></table></figure>
<p>这样的结果，怎能不感慨“好一个<strong>人参惨淡</strong>”，在了解这个背后的原因之前，我们先来了解下JavaScript官方对于变量Var的一些定义及解释：</p>
<ul>
<li>变量的声明</li>
</ul>
<p>　　　　1.使用var多次声明同一个变量，是合法的; 重复的声明并初始化变量值，只是相当于普通的赋值语句;</p>
<p>　　　　2.读取一个未声明的变量值，JavaScript会产生一个错误;</p>
<p>　　　　3.尝试给一个未经var声明的变量赋值，JavaScript会隐式声明该变量，隐式声明的变量被直接创建为全局变量;</p>
<p>　　　　4.无论是全局变量还是局部变量，最好都建议使用var进行声明（strict严格模式下不声明var变量直接报错）;</p>
<p>看完这样的定义，一下子秒懂，有木有？！</p>
<p>刚才我们上面童鞋那样的写法，直接会导致 <strong>i 变成全局变量</strong>， 所以等同写法： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wss</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> x = i;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，看看，这是一个多么糟糕的写法，直接会隐式创建一个全局变量，继而引发变量污染。所以，我们切记，在日常开发过程中，不要这么写！</p>
<h2 id="延伸一"><a href="#延伸一" class="headerlink" title="延伸一"></a>延伸一</h2><p>那到这里，突然还有个疑问，你们说，这显式创建的全局变量和隐式创建的全局变量，自然都是window的属性，那他们俩者真的完全一样么？我们通过ECMAScrpit提供的属性特性查询方法，来发现他们之间的秘密。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>; </div><div class="line"><span class="built_in">window</span>.b = <span class="number">3</span>; </div><div class="line">c = <span class="number">4</span>; </div><div class="line"><span class="keyword">this</span>.d = <span class="number">4</span>; </div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'a'</span>); <span class="comment">//configurable:false,enumerable:true,value:2,writable:true </span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'b'</span>); <span class="comment">//configurable:true,enumerable:true,value:3,writable:true </span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'c'</span>); <span class="comment">//configurable:true,enumerable:true,value:4,writable:true </span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'d'</span>); <span class="comment">//configurable:true,enumerable:true,value:4,writable:true</span></div></pre></td></tr></table></figure>
<p>通过上面的查询发现，原来还是有差别的，我们再用delete删除属性来验证下，配置性configurable为false的属性无法删除，即通过变量var显式声明全局对象的属性无法删除。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> a; <span class="comment">// 无法删除 </span></div><div class="line"><span class="keyword">delete</span> b; <span class="comment">// 可删除 </span></div><div class="line"><span class="keyword">delete</span> c; <span class="comment">// 可删除 </span></div><div class="line"><span class="keyword">delete</span> d; <span class="comment">// 可删除</span></div></pre></td></tr></table></figure></p>
<h5 id="结论就是：在全局作用域下，使用var定义的变量不可以delete，没有var定义的变量可以delete。也就说明隐式全局变量严格来说不是真正的变量，而是全局对象的属性，因为属性可以通过delete删除，而变量不可以。"><a href="#结论就是：在全局作用域下，使用var定义的变量不可以delete，没有var定义的变量可以delete。也就说明隐式全局变量严格来说不是真正的变量，而是全局对象的属性，因为属性可以通过delete删除，而变量不可以。" class="headerlink" title="结论就是：在全局作用域下，使用var定义的变量不可以delete，没有var定义的变量可以delete。也就说明隐式全局变量严格来说不是真正的变量，而是全局对象的属性，因为属性可以通过delete删除，而变量不可以。"></a><strong>结论</strong>就是：在全局作用域下，使用var定义的变量不可以delete，没有var定义的变量可以delete。也就说明隐式全局变量严格来说不是真正的变量，而是全局对象的属性，因为属性可以通过delete删除，而变量不可以。</h5><h2 id="延伸二"><a href="#延伸二" class="headerlink" title="延伸二"></a>延伸二</h2><p>我们试着来再看这一段小程序，看看结果如何？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wss = <span class="string">"global"</span>;        </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;           </div><div class="line">    alert(wss);            <span class="comment">//提示undefined           </span></div><div class="line">    <span class="keyword">var</span> wss = <span class="string">"local"</span>;            </div><div class="line">    alert(wss);           <span class="comment">//提示local                           </span></div><div class="line">&#125;</div><div class="line">f();</div></pre></td></tr></table></figure>
<p>为何会是这样的结果？这个跟使用<strong>var定义变量还会提升变量声明</strong>有关。</p>
<p>在函数内部显式声明了一个与全局变量同名的局部变量，第一次alert， 解析器就会先将变量声明提升，所以就导致局部变量wss是已经被声明了，但是没有初始化值，所以提示undefined; 而第二次的alert，wss = “local” 之后的，也就是局部变量wss完成了初始化，所以提示为local。</p>
<p>该段代码实际相当于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wss = <span class="string">"global"</span>;        </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;            </div><div class="line">    <span class="keyword">var</span> wss;       <span class="comment">//声明局部变量wss，未初始化            </span></div><div class="line">    alert(wss);                      </div><div class="line">    wss = <span class="string">"local"</span>; <span class="comment">//初始化wss          </span></div><div class="line">    alert(wss);                                   </div><div class="line">&#125;</div><div class="line">f();</div></pre></td></tr></table></figure>
<p>那如果不使用var定义变量呢？ </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wss = <span class="string">"global"</span>;        </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;            </div><div class="line">    alert(wss);            <span class="comment">//提示global    </span></div><div class="line">    alert(wss2);           <span class="comment">//'wss2' is not defined</span></div><div class="line">    wss = <span class="string">"local"</span>;   </div><div class="line">    wss2 = <span class="string">"local2"</span>;         </div><div class="line">    alert(wss);           <span class="comment">//提示local                           </span></div><div class="line">&#125;</div><div class="line">f();</div></pre></td></tr></table></figure>
<h5 id="结论就是：使用var定义的变量的声明提前，未使用var定义的变量声明不变。"><a href="#结论就是：使用var定义的变量的声明提前，未使用var定义的变量声明不变。" class="headerlink" title="结论就是：使用var定义的变量的声明提前，未使用var定义的变量声明不变。"></a><strong>结论</strong>就是：使用var定义的变量的声明提前，未使用var定义的变量声明不变。</h5><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>JavaScript一个如此简单的赋值语句背后，竟隐藏着太多奇葩的特性，而这些一个不留神，就将让你的程序陷入一个变量污染噩梦里。美，也是有杀伤力滴~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在茫茫前端路各种&lt;strong&gt;专业化、对象化、工程化&lt;/strong&gt;的今天，你以为光会切个图写点&lt;strong&gt;DIV\CSS&lt;/strong&gt;就能称前端了？&lt;/p&gt;
&lt;p&gt;在Node.js火爆当道，在AngularJS\Express\Vue\React等各种框架层出不穷之时，万变不离其宗，唯一能让自己心安的，或许还是老老实实一点点打下扎实高端大气上档次的JavaScript基础，玩转玩遍它才是王道呀。自从学习JavaScript以来，它的无拘无束的「自由」实在令人印象深刻且赞，但同时也带来太多的奇葩与有些别扭的语法糖。&lt;center&gt;&lt;img src=&quot;http://sunshinewu.github.io/images/2.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://sunshinewu.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://sunshinewu.github.io/tags/JavaScript/"/>
    
      <category term="变量var" scheme="http://sunshinewu.github.io/tags/%E5%8F%98%E9%87%8Fvar/"/>
    
      <category term="奇葩之美" scheme="http://sunshinewu.github.io/tags/%E5%A5%87%E8%91%A9%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="隐式" scheme="http://sunshinewu.github.io/tags/%E9%9A%90%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【GitHub + Hexo 干货No.1】初相遇，好基友，一辈子！</title>
    <link href="http://sunshinewu.github.io/2016/05/07/Hexo-World/"/>
    <id>http://sunshinewu.github.io/2016/05/07/Hexo-World/</id>
    <published>2016-05-06T17:49:11.000Z</published>
    <updated>2016-08-25T19:02:53.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a>What is Hexo?</h3><p>Hexo 是一个简单、轻量、基于Node.js的一个静态博客框架，可以方便的生成静态网页托管在GitHub | Coding | GitCafe | 七牛等各种静态存储空间上，引用Hexo作者 @tommy351（台湾） 的原话：</p>
<blockquote>
<p>快速、简单且功能强大的 Node.js 博客框架。</p>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<center><img src="http://sunshinewu.github.io/images/1.gif"><br><br></center>

<a id="more"></a>
<p>身为程序猿，不捣腾点折腾玩意儿，那都愧对咱自己，纵使996，亦或天天加班的情况下，还尼玛抽出点时间来写写Blog也是一种“<strong>幸福</strong>”嘛！于是，你就在新浪Blog，CSDN，博客园安家？那多没逼格啊！！肯定得整个自己的独立博客嘛，可又觉得申请域名 + 服务器 + SQL存储 + 部署 + 防入侵神马的太麻烦也就一直没去弄（<strong>真相</strong>：WordPress，各种一键安装神马的，实在提不起劲来了，就作吧-_-|）。不知从何年何月开始，身边慢慢多了很多猿子们一个个在晒自己的GitHub Blog，啧啧，这种潮流，咱能不跟进嘛~~</p>
<p>话说回来，Hexo这个优秀的静态博客框架，搭配上现在流行的GitHub，简直是屌丝党居家<strong>必备良品</strong> &amp; 码字Blog的黄金搭档哟。<br>OK，闲话不多说，咱们开始干货之旅吧！</p>
<p>若是小小菜，可以先暂且花点小时间稍微了解下以下内容：</p>
<ul>
<li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li>
<li><a href="https://github.com/riku/Markdown-Syntax-CN" target="_blank" rel="external">Markdown</a></li>
</ul>
<h1 id="二、操刀配置-Windows平台下"><a href="#二、操刀配置-Windows平台下" class="headerlink" title="二、操刀配置(Windows平台下)"></a>二、操刀配置(Windows平台下)</h1><h2 id="2-1-GitHub-Pages-Repositories"><a href="#2-1-GitHub-Pages-Repositories" class="headerlink" title="2.1 GitHub Pages Repositories"></a>2.1 GitHub Pages Repositories</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的 GitHub 账号下创建一个新的仓库，命名为<strong>username.github.io</strong>（username是你的账号名)。</p>
<p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而咱们这一次所使用的是User Pages。</p>
<p><strong>User Pages 与 Project Pages的区别</strong>：</p>
<ol>
<li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li>
<li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li>
<li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支（以前还需要手工设置，现在貌似当创建项目时会自动归类到gh-pages分支）。</li>
<li>User Pages 通过 http(s)://username.github.io  进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li>
</ol>
<h3 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li>
</ul>
<h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h3><p>在windows下安装git比较常用的有两种方式：</p>
<ul>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">Git 官方版本安装</a></li>
<li><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows客户端安装</a></li>
</ul>
<h3 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h3><p>一般建议使用Git Bash，所以当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;username@example.com&quot;</div></pre></td></tr></table></figure>
<h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装 Git</a></li>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">配置 Git</a></li>
<li><a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">Setting your email in Git</a></li>
<li><a href="https://help.github.com/articles/keeping-your-email-address-private/" target="_blank" rel="external">Keeping your email address private</a></li>
</ul>
<h2 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h2><h3 id="2-3-1-Git-与-GitHub-的区别"><a href="#2-3-1-Git-与-GitHub-的区别" class="headerlink" title="2.3.1 Git 与 GitHub 的区别"></a>2.3.1 Git 与 GitHub 的区别</h3><p>这里，我们要区分清楚 Git 与 GitHub。</p>
<p>Git是一个版本控制的工具，而GitHub有点类似于远程仓库，用于存放用Git管理的各种公有或私有项目。</p>
<h3 id="2-3-2-与-GitHub-建立联系"><a href="#2-3-2-与-GitHub-建立联系" class="headerlink" title="2.3.2 与 GitHub 建立联系"></a>2.3.2 与 GitHub 建立联系</h3><p>为了能够在本地使用 Git 管理 GitHub 上的项目，需要进行一些配置，这里介绍SSH的方法。</p>
<h4 id="2-3-2-1-检查电脑是否已经有SSH-keys"><a href="#2-3-2-1-检查电脑是否已经有SSH-keys" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH keys"></a>2.3.2.1 检查电脑是否已经有SSH keys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>
<p>如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p>
<h4 id="2-3-2-2-如果没有SSH-key，则生成新的SSH-key"><a href="#2-3-2-2-如果没有SSH-key，则生成新的SSH-key" class="headerlink" title="2.3.2.2 如果没有SSH key，则生成新的SSH key"></a>2.3.2.2 如果没有SSH key，则生成新的SSH key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<p>之后一路回车即可。</p>
<h4 id="2-3-2-3-向ssh-agent添加key。"><a href="#2-3-2-3-向ssh-agent添加key。" class="headerlink" title="2.3.2.3 向ssh-agent添加key。"></a>2.3.2.3 向ssh-agent添加key。</h4><p>首先确保ssh-agent可运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-agent -s</div></pre></td></tr></table></figure>
<p>然后添加SSH key：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>注意： 此刻如果执行 ssh-add 时显示错误 Could not open a connection to your authentication agent. 那么执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval `ssh-agent -s`</div></pre></td></tr></table></figure></p>
<p>后重新执行 ssh-add 那条命令即可。</p>
<h4 id="2-3-2-4-在GitHub添加SSH-key"><a href="#2-3-2-4-在GitHub添加SSH-key" class="headerlink" title="2.3.2.4 在GitHub添加SSH key"></a>2.3.2.4 在GitHub添加SSH key</h4><p>首先，拷贝key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>也可以用编辑器打开对应的id_rsa.pub文件，全选复制。</p>
<p>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果你看到：</p>
<blockquote>
<p>The authenticity of host ‘github.com (192.30.252.XXX)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
<p>就键入：yes。之后将会看到如下信息：</p>
<blockquote>
<p>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<h3 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH keys</a></li>
</ul>
<h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果你的电脑中已经安装上述必备程序，那么恭喜！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<blockquote>
<p>注：苦于处于“大局域网”环境下，安装及初始化的过程会较为慢-_-#</p>
</blockquote>
<h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你想创建的供以后存储Blog相关的文件夹内（例如 D:\Hexo），点击鼠标右键选择Git bash，输入以下指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>该命令会在目标文件夹内建立Blog所需的所有文件。接下来是安装依赖包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>这样，我们就已经搭建起本地的 Hexo 博客了。可以先执行以下命令，然后在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 就可以满怀激动地查看我们的“小家”啦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<h3 id="这里顺便普及几个-Hexo-常用的命令，-后面为注释。"><a href="#这里顺便普及几个-Hexo-常用的命令，-后面为注释。" class="headerlink" title="这里顺便普及几个 Hexo 常用的命令，#后面为注释。"></a>这里顺便普及几个 Hexo 常用的命令，#后面为注释。</h3><blockquote>
<p>hexo g #完整命令为hexo generate，用于生成静态文件</p>
<p>hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览</p>
<p>hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</p>
<p>hexo n #完整命令为hexo new，用于新建一篇文章</p>
</blockquote>
<p>当然，这个眼前所见的博客只是本地的，别人是浏览不了的，你需要结合Git部署到GitHub上，大家才可以正常浏览到。</p>
<h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
</ul>
<h1 id="三、部署之道"><a href="#三、部署之道" class="headerlink" title="三、部署之道"></a>三、部署之道</h1><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地 Hexo 博客。现在，需要使用 GitHub Pages 搭建一个大家都能够访问的 Hexo 博客了。</p>
<h2 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h2><p>我们继续使用上面的文件夹D:\Hexo，然后编辑该文件夹下的_config.yml。</p>
<p>默认生成的_config.yml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure>
<p>修改后的_config.yml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 对应仓库的SSH地址（好比我的：https://github.com/sunshinewu/sunshinewu.github.io.git）</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>为了能够使Hexo部署到GitHub上，还需要安装一个插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后，执行下列指令即可完成部署：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>现在，就可以通过在浏览器地址栏敲入：username.github.io进行浏览啦！激动吧！！~</p>
<h2 id="3-2-其它主题theme"><a href="#3-2-其它主题theme" class="headerlink" title="3.2 其它主题theme"></a>3.2 其它主题theme</h2><p>如果想要使用其它主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p>
<p>详细步骤可以参考网上其它的指南。</p>
<h1 id="四、写下-amp-发布一篇文章"><a href="#四、写下-amp-发布一篇文章" class="headerlink" title="四、写下&amp;发布一篇文章"></a>四、写下&amp;发布一篇文章</h1><h3 id="4-1-创建："><a href="#4-1-创建：" class="headerlink" title="4.1 创建："></a>4.1 创建：</h3><p>在Git Bash执行命令创建一篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;Hexo First&quot;</div></pre></td></tr></table></figure></p>
<h3 id="4-2-打开-amp-编写"><a href="#4-2-打开-amp-编写" class="headerlink" title="4.2 打开 &amp; 编写"></a>4.2 打开 &amp; 编写</h3><p>在D:\hexo\source_post中打开Hexo-First.md，打开方式使用记事本或者其他文本编辑工具。<br>Hexo 中写文章使用的是 Markdown ，这里推荐使用 <code>MarkdownPad</code> 这个工具。 Markdown编写语法参照上面所推荐一个链接，不难</p>
<blockquote>
<p>title: Hexo First #可改成中文的，如“好基友”</p>
<p>date: 2016-05-07 01:49:11 #发表日期，一般不改动</p>
<p>categories: blog #文章文类</p>
<p>tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</p>
<hr>
<p>这里是正文，用 Markdown 写，你可以选择写一段显示在首页的简介后，加上<code>&lt;!--more--&gt;</code>，在<code>&lt;!--more--&gt;</code>之前的内容会显示在首页，之后的内容会被隐藏，当别人点击<strong>Read More</strong>或主题进入文章内才能看到。</p>
</blockquote>
<h3 id="4-3-生成-amp-预览-amp-部署"><a href="#4-3-生成-amp-预览-amp-部署" class="headerlink" title="4.3 生成 &amp; 预览 &amp; 部署"></a>4.3 生成 &amp; 预览 &amp; 部署</h3><p>写完文章后，你可以使用</p>
<ol>
<li>$ hexo g #生成静态文件</li>
<li>$ hexo s #在本地预览效果</li>
<li>$ hexo d #同步到 GitHub，然后使用 <a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a> 进行访问</li>
</ol>
<h1 id="五、优化部署与管理"><a href="#五、优化部署与管理" class="headerlink" title="五、优化部署与管理"></a>五、优化部署与管理</h1><p>注：参考部分网友建议</p>
<h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>Hexo部署到 GitHub 上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p>
<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>
<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，感觉会很麻烦（10个项目需要20个仓库(ˉ▽ˉ)…）。</p>
<p>所以，分支就可以派上用场了！！！</p>
<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>
<p>下面以一个例子详细地讲述下。</p>
<h3 id="5-2-博客搭建流程"><a href="#5-2-博客搭建流程" class="headerlink" title="5.2 博客搭建流程"></a>5.2 博客搭建流程</h3><ol>
<li>创建仓库，username.github.io；</li>
<li>创建两个分支：master 与 hexo；</li>
<li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li>
<li>使用git clone git@github.com:username/username.github.io.git拷贝仓库；</li>
<li>username.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li>
<li>修改_config.yml中的deploy参数，分支应为master；</li>
<li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li>
<li>执行hexo generate -d生成网站并部署到GitHub上。</li>
</ol>
<p>这样一来，在GitHub上的username.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p>
<h3 id="5-3-博客管理流程"><a href="#5-3-博客管理流程" class="headerlink" title="5.3 博客管理流程"></a>5.3 博客管理流程</h3><h4 id="5-3-1-日常修改"><a href="#5-3-1-日常修改" class="headerlink" title="5.3.1 日常修改"></a>5.3.1 日常修改</h4><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>
<ol>
<li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</li>
<li>然后才执行hexo generate -d发布网站到master分支上。</li>
</ol>
<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
<h4 id="5-3-2-本地资料丢失"><a href="#5-3-2-本地资料丢失" class="headerlink" title="5.3.2 本地资料丢失"></a>5.3.2 本地资料丢失</h4><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ol>
<li>使用git clone git@github.com:username/username.github.io.git拷贝仓库（默认分支为hexo）；</li>
<li>在本地新拷贝的username.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li>
</ol>
<h1 id="六、结尾"><a href="#六、结尾" class="headerlink" title="六、结尾"></a>六、结尾</h1><p>整理下来，好累但值得 (-.-)=3</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;h3 id=&quot;What-is-Hexo&quot;&gt;&lt;a href=&quot;#What-is-Hexo&quot; class=&quot;headerlink&quot; title=&quot;What is Hexo?&quot;&gt;&lt;/a&gt;What is Hexo?&lt;/h3&gt;&lt;p&gt;Hexo 是一个简单、轻量、基于Node.js的一个静态博客框架，可以方便的生成静态网页托管在GitHub | Coding | GitCafe | 七牛等各种静态存储空间上，引用Hexo作者 @tommy351（台湾） 的原话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快速、简单且功能强大的 Node.js 博客框架。&lt;/p&gt;
&lt;p&gt;A fast, simple &amp;amp; powerful blog framework, powered by Node.js.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;img src=&quot;http://sunshinewu.github.io/images/1.gif&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://sunshinewu.github.io/categories/Hexo/"/>
    
    
      <category term="Blog" scheme="http://sunshinewu.github.io/tags/Blog/"/>
    
      <category term="静态博客" scheme="http://sunshinewu.github.io/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://sunshinewu.github.io/tags/Hexo/"/>
    
      <category term="GitHub Page" scheme="http://sunshinewu.github.io/tags/GitHub-Page/"/>
    
      <category term="Git， 干货， 基友" scheme="http://sunshinewu.github.io/tags/Git%EF%BC%8C-%E5%B9%B2%E8%B4%A7%EF%BC%8C-%E5%9F%BA%E5%8F%8B/"/>
    
  </entry>
  
</feed>
